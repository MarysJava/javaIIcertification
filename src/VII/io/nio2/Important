Use Path IF instead File
Paths is a utilitary class to get paths.

The toPath() method in the java.io.File class returns the Path object; this method was added in
Java 7. Similarly, you can use the toFile() method in the Path interface to get a File object.

even if two Path objects point to the same file/directory, it is not guaranteed that you will get true from
the equals() method. You need to make sure that both are absolute and normalized paths for an equality
comparison to succeed for paths.


Map<String,Object> readAttributes(Path path, String attributes, LinkOption. . . options)
<A extends BasicFileAttributes> A readAttributes(Path path, Class<A> type, LinkOption. . . options)
The first method returns a Map of attribute value pairs and takes variable length parameters. The attributes
parameter is the key parameter where you need to specify what you want to retrieve. This parameter is similar to what
you used in the getAttribute() method; however, here you can specify a list of attributes you want, and you can also
use '*' to specify all attributes. For instance, using "*" means all attributes of the default FileAttributeView, such as
BasicFileAttributes (specified as basic-file-attributes). Another example is: dos:*, which refers to all attributes of
dos file attributes.
The second method uses generics syntax (Chapter 6). The second parameter here takes a class from the
BasicFileAttributes hierarchy. We’ll talk about the hierarchy shortly. The method returns an instance from the
BasicFileAttributes hierarchy.

BasicFileAttributes fileAttributes = Files.readAttributes(path, BasicFileAttributes.class);

All the directories (except the last one if you are copying a directory) in the specified path must exist to avoid NoSuchFileException.

If you copy a directory using the copy() method, it will not copy the files/directories contained in the source directory; you need to explicitly copy them to the destination folder.

If you move a symbolic link, the link itself will be moved, not the target file of the link. It is important to note that in the case of the copy() method, if you specify a symbolic link, the
target of the link is copied, not the link itself.

In the case of a directory, the delete() method should be invoked on an empty directory; otherwise the method will fail. In the case of a symbolic
link, the link will be deleted, not the target file of the link. The file you intend to delete must exist; otherwise you will get
a NoSuchFileException. If you silently delete a file and do not want to be bothered about this exception, then you may
use the deleteIfExists() method.


Path walkFileTree(Path start, FileVisitor<? super Path> visitor)

Path walkFileTree(Path start, Set<FileVisitOption> options, int maxDepth, FileVisitor<? super Path> visitor)
The maximum depth parameter specifies the depth of the file tree you wish to visit; a 0 value indicates only the specified file and a MAX_VALUE indicates that all
levels of directories must be visited.

class MyFileVisitor extends SimpleFileVisitor<Path>

The PathMatcher interface is implemented for each file system, and you can get an instance of it from
the FileSystem class using the getPathMatcher() method.
Glob is a pattern-specifying mechanism where you can specify file matching patterns as strings.
glob:File*.java

PathMatcher matcher = FileSystems.getDefault().getPathMatcher(pattern); onde pattern é o glob.
Files.walkFileTree(startPath, new MyFileFindVisitor(pattern));

Watch service
WatchService watchService = path.getFileSystem().newWatchService();
or
WatchService watchService = FileSystems.getDefault().newWatchService();

path.register(watchService, StandardWatchEventKinds.ENTRY_MODIFY);

Loop infinito p/ ficar vigiando 
for (;;) 

The poll() returns a queued key if available; otherwise it returns immediately.
The poll(long, TimeUnit) method returns a queued key if available; otherwise it waits for the specified time (the long value) and for the specified time unit. The method returns
after the specified time limit is elapsed.
The take() method returns a queued key if available; otherwise it waits until a key is available.

The main difference between the poll() and take() methods is that poll() is a non-blocking call and take() is a blocking call.

	WatchKey key =  watchService.take();
	} catch (InterruptedException e) {   
	
	// Itera em cada evento
	for (WatchEvent<?> event : key.pollEvents()) {
		//pollEvents: Retrieves and removes all pending events for this watch key, returning a List of the events that were retrieved. 
	
				The kind of event using the kind() method
				The name of the file for which the event has occurred using the context() method
				switch (event.kind().name()) {
				case "ENTRY_MODIFY":
					System.out.println("File " + event.context() + " is changed!");
					break;
				//ENTRY_MODIFY (belonging to StandardWatchEventKinds). ENTRY_CREATE, ENTRY_DELETE, and OVERFLOW. 
				//OVERFLOW specifies that a few event notifications are discarded or missed. 
				
			}
	key.reset(); // reseta chave p/ poder ficar ready novamente e receber novas notificações
		A watch key might be in ready state (ready to accept events), in signed state (when one or more events are queued),
or in invalid state (when the watch key is not valid). If the key is in the signed state, it is required to call the reset() method; otherwise the state of the key will not change to ready
state and you will not receive any further event notification.

PATH Methods

Path getRoot() Returns a Path object representing the root of the given path,
or null if the path does not have a root.

Path getFileName() Returns the file name or directory name of the given path. Note
that the file/directory name is the last element or name in the
given path.

Path getParent() Returns the Path object representing the parent of the given
path, or null if no parent component exists for the path.

int getNameCount() Returns the number of file/directory names in the given path;
returns 0 if the given path represents the root.

Path getName(int index) Returns the ith file/directory name; the index 0 starts from
closest name to the root.

Path subpath(int beginIndex, int endIndex) Returns a Path object that is part of this Path object; the
returned Path object has a name that begins at beginIndex
till the element at index endIndex - 1. In other words,
beginIndex is inclusive of the name in that index and
exclusive of the name in endIndex. This method may throw
IllegalArgumentException if beginIndex is >= number of
elements, or endIndex <= beginIndex, or endIndex is > number
of elements.

Path normalize() Removes redundant elements in path such as . (dot symbol
that indicates current directory) and .. (double dot symbol that
indicates parent directory).

Path resolve(Path other)
Path resolve(String other)
Resolves a path against the given path. For example, this
method could combine the given path with the other path and
return the resulting path.

Boolean isAbsolute() Returns true if the given path is an absolute path; returns false
if not (when the given path is a relative path, for example).

Path startsWith(String path)
Path startsWith(Path path)
Returns true if this Path object starts with the given path, or
else returns false.

Path toAbsolutePath() Returns the absolute path.

toUri() method returns the URI (a path that can be opened from a browser)
from the path.

toRealPath() is an interesting method. It returns an absolute path from the input path object
(as toAbsolutePath()). Also, it normalizes the path (as in normalize()). Further, if linking
options are chosen properly, it resolves symbolic links also. However, to succeed with this
method, it is necessary that the target file/directory exists in the file system, which is not a
prerequisite for other Path methods.


FILES

Path createDirectory(Path dirPath, FileAttribute<?>. . . dirAttrs)
Path createDirectories(Path dir, FileAttribute<?>. . . attrs)
Creates a file given by the dirPath, and sets the attributes given by dirAttributes. May throw
exceptions such as FileAlreadyExistsException or UnsupportedOperationException (e.g., when the
file attributes cannot be set as given by dirAttrs).
The difference between createDirectory and createDirectories is that createDirectories creates
intermediate directories given by dirPath if they are not already present.

Path createTempFile(Path dir, String prefix, String suffix, FileAttribute<?>. . . attrs)
Creates a temporary file with given prefix, suffix, and attributes in the directory given by dir.

Path createTempDirectory(Path dir, String prefix, FileAttribute<?>. . . attrs)
Creates a temporary directory with the given prefix, directory attributes in the path specified by dir.

Path copy(Path source, Path target, CopyOption. . . options) 
Copy the file from source to target. CopyOption could be REPLACE_EXISTING, COPY_ATTRIBUTES, or
NOFOLLOW_LINKS. Can throw exceptions such as FileAlreadyExistsException.

Path move(Path source, Path target, CopyOption. . . options)
Similar to the copy operation except that the source file is removed; if the source and target are in the same
directory, it is a file rename operation.

boolean isSameFile(Path path, Path path2) Checks if the two Path objects are located the same file or not.

boolean exists(Path path, LinkOption. . . options) Checks if a file/directory exists in the given path; can
specify LinkOption.NOFOLLOW_LINKS to not to follow symbolic links.

Boolean isRegularFile(Path path, LinkOption. . .)
Returns true if the file represented by path is a regular file.

Boolean isSymbolicLink(Path path) Returns true if the file presented by path is a
symbolic link.

Boolean isHidden(Path path) Return true if the file represented by path is a
hidden file.

long size(Path path) Returns the size of the file in bytes represented by path.
UserPrincipal getOwner(Path path, LinkOption. . .),

Path setOwner(Path path, UserPrincipal owner)
Gets/sets the owner of the file.

FileTime getLastModifiedTime(Path path,
LinkOption. . .), Path setLastModifiedTime(Path path, FileTime time)
Gets/sets the last modified time for the specified time.

Object getAttribute(Path path, String attribute, LinkOption. . .), Path setAttribute(Path path,
String attribute, Object value, LinkOption. . .)
Gets/sets the specified attribute of the specified file.

FileVisitor Methods

FileVisitResult preVisitDirectory(T dir, BasicFileAttributes attrs) Invoked just before the elements of the
directory are accessed.

FileVisitResult visitFile(T file, BasicFileAttributes attrs) Invoked when a file is visited.

FileVisitResult postVisitDirectory(T dir, IOException exc) Invoked when all the elements of the
directory are accessed.

FileVisitResult visitFileFailed(T file, IOException exc) Invoked when the file cannot be
accessed.

GLOBS

* Matches any string of any length, even zero length.
** Similar to “*”, but it crosses directory boundaries.
? Matches to any single character,
[xyz] Matches to either x , y, or z.
[0–5] Matches to any character in the range 0 to 5.
[a–z] Matches to any lowercase letter.
{xyz, abc} Matches to either xyz or abc.