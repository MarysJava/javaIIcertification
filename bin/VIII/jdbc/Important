Connection IF

You need to add the jar name along with the full path to the classpath variable.

connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); to update db using a resultset

Statement createStatement() Creates a Statement object that can be used to send SQL statements to the database.

Always call updateRow() after modifying the row contents; otherwise you will lose the changes.

ResultSetMetaData
DatabaseMetaData

When forget to set Auto commit false and use transactions:
	MySQLNonTransientConnectionException: Can't call rollback when autocommit=true

The boolean absolute(int) method in ResultSet moves the cursor to the passed row
number in that ResultSet object. If the row number is positive, it moves to that position from
the beginning of the ResultSet object; if the row number is negative, it moves to that position
from the end of the ResultSet object. Assume that there are 10 entries in the ResultSet
object. Calling absolute(3) will move the cursor to the third row. Calling absolute(−3) will
move the cursor to the 10–3, seventh row. If you give out of range values, the cursor will move
to either beginning or end.

In a ResultSet object, calling absolute(1) is equivalent to calling first(), and calling
absolute(−1) is equivalent to calling last().

The method executeQuery() returns a resultset, executeUpdate() returns an update count, and the execute() method may return multiple resultsets,
or multiple update counts, or a combination of both.

Connection Interface Methods

PreparedStatement prepareStatement(String sql)
Creates a PreparedStatement object that can contain SQL statements. The SQL statement can have IN parameters; they may contain ‘?’ symbol(s),
which are used as placeholders for passing actual values later.

CallableStatement prepareCall(String sql)
Creates a CallableStatement object for calling stored procedures in the database. The SQL statement can have IN or OUT parameters; they may contain ‘?’ symbol(s), which are used as placeholders for passing actual values later.

DatabaseMetaData getMetaData()
Gets the DataBaseMetaData object. This metadata contains useful information, such as database schema information, table information, etc.,
which is especially useful when you don’t know the underlying database.

Clob createClob() Returns a Clob object (Clob is the name of the interface). CLOB (Character
Large Object) is a built-in type in SQL; it can be used to store a column value in a row of a database table.

Blob createBlob() Returns a Blob object (Blob is the name of the interface). BLOB (Binary
Large Object) is a built-in type in SQL; it can be used to store a column value in a row of a database table.

void setSchema(String schema) When passed the schema name, it sets this Connection object to the database schema to access.

String getSchema() Returns the schema name of the database associated with this Connection object; returns null if no schema is associated with it.

Connection Interface TRANSACTIONAL Methods

void setAutoCommit(boolean autoCommit) Sets the auto-commit mode to true or false. By default,
Connection objects have auto-commit set to true, and you can set it to false by calling this method with false as the argument value.

boolean getAutoCommit() Returns the auto-commit mode value (a true value means auto-commit mode, and a false value means manual
commit mode).

Savepoint setSavepoint() Creates a Savepoint object in the current transaction and
returns that object.

Savepoint setSavepoint(String name) Same as the previous method, except that the Savepoint
object has a name associated with it.

void releaseSavepoint(Savepoint savepoint) Removes the given Savepoint object and the subsequent
Savepoint objects from the current transaction.

void rollback(Savepoint savepoint) Rolls back to the given Savepoint state. In other words, all
the changes done after the Savepoint was created will be lost or removed (an undo operation till that Savepoint).
Will throw a SQLException if rollback cannot be done (for example, an invalid Savepoint object is passed).
void rollback() Rolls back (undoes) all the changes made in the current transaction. Will throw a SQLException if rollback fails
(e.g., rollback() was called when auto-commit mode is set).

void commit() Makes (commits) all the chan

ResultSet resultSet1 = null, resultSet2 = null; posso declarar assim dentro de um método

Savepoint

JdbcRowSet, JoinRowSet, CachedRowSet, WebRowSet, and FilteredRowSet.
JdbcRowSetImpl, JoinRowSetImpl, CachedRowSetImpl, WebRowSetImpl, and FilteredRowSetImpl.

Statement, PreparedStatement, CallableStatement
Methods: executeQuery(), executeUpdate(), and execute().

ResultSet methods

void beforeFirst() Sets the cursor just before the first row in the ResultSet.
void afterLast() Sets the cursor just after the last row of the ResultSet.
boolean absolute(int rowNumber) Sets the cursor to the requested row number absolutely.
boolean relative(int rowNumber) Sets the cursor to the requested row number relatively.
boolean next() Sets the cursor to the next row of the ResultSet.
boolean previous() Sets the cursor to the previous row of the ResultSet.

double getDouble(int columnNumber)
double getDouble(String columnName). In a similar way, ResultSet provides get() methods
for all basic types. Similarly, ResultSet provides a set of methods to update values at the desired column in the selected row. These
methods also come in two variants: void updateXXX(int columnNumber, XXX x) and void updateXXX(String columnName, XXX x), where the update methods are defined for various data types represented as XXX.

There are four types of drivers:
• Type 1 (JDBC-ODBC bridge drivers): JDBC driver calls ODBC (Open Database
Connectivity) native calls using the Java Native Interface (JNI).
• Type 2 (Native-API drivers): These drivers use client-side libraries of a specific database
and convert JDBC calls to native database calls.
• Type 3 (Network-protocol drivers): These drivers call database middleware and the
middleware actually converts JDBC calls to database-specific native calls.
• Type 4 (Native-protocol drivers): The driver directly makes database-specific calls over
the network without any support of additional client-side libraries.