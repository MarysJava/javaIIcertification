To override the run() method, you need to declare it as public; it takes no arguments and has a void return type—in other words, it should be declared as public void run().
If you don’t override the run() method, the default run() method from the Thread class will be called, which does nothing.

Inside the run() method, you can directly call the getName() method: MyThread1 extends Thread, so all base class members are available in MyThread1 also.

If you call the run() method directly, it simply executes as part of the calling thread.
When you call the start() method, the thread gets scheduled and the run() method is invoked by the JVM when it is time to execute that thread.

Never call the run() method directly for invoking a thread. Use the start() method and leave it to the
JVM to implicitly invoke the run() method. Calling the run() method directly instead of calling start()
is a mistake and is fairly common bug.

You need to be careful in changing thread priority since it can affect scheduling of threads. You can programmatically access the minimum, normal, and maximum priority of the
threads using the static members MIN_PRIORITY, NORM_PRIORITY, and MAX_PRIORITY

A thread can “interrupt” another thread, say, to request it to stop working. In that case, the thread receiving the interrupt—if it is
in sleep() or wait() (which we’ll revisit later)—results in throwing an InterruptedException. The thread receiving
the interrupt can ignore the interrupt and continue execution (which is not a good idea, but it is possible to do
so), or it can stop the execution.

This is one of the fundamental and most important concepts to understand in multi-threading.
You can neither predict nor control the order of execution of threads!
Since behavior of multi-threaded programs is non-deterministic, you must be careful in writing
multi-threaded programs. You cannot expect pre-determined output based on the execution order of
threads.

When two or more threads are trying to access a variable and one of them wants to modify it, you get a problem
known as a data race (also called as race condition or race hazard).

The expression Counter.count++ is a write operation, and the next System.out.print statement has a read
operation for Counter.count. When the three threads execute, each of them has a local copy of the value Counter.count
and when they update the counter with Counter.count++, they need not immediately reflect that value in the main
memory. In the next read operation of Counter.count, the local value of Counter.count is printed.

To avoid this problem, you need to ensure that a single thread does the write and read operations together (atomically).
The section of code that is commonly accessed and modified by more than one thread is known as critical section. To avoid the data race problem, you need to ensure that
the critical section is executed by only one thread at a time.

synchronized blocks and synchronized methods.

A thread has to acquire a lock on the synchronized variable to enter the block; when the execution of the block
completes, the thread releases the lock. For example, you can acquire a lock on this reference if the block of code is
within a non-static method:
synchronized(this) {
// code segment guarded by the mutex lock
}
What if an exception gets thrown inside the synchronized block? Will the lock get released? Yes, no matter
whether the block is executed fully or an exception is thrown, the lock will be automatically released by the JVM.
With synchronized blocks, you can acquire a lock on a reference variable only. If you use a primitive type, you will
get a compiler error.

If the thread cannot get the lock, it will be blocked and the thread will wait until the lock becomes available.

A synchronized method is equivalent to a synchronized block if you enclose the whole method body in a synchronized(this) block.

You can declare static methods synchronized. However, what is the reference variable on which the lock is
obtained? Remember that static methods do not have the implicit this reference. Static synchronized methods
acquire locks on the class object. Every class is associated with an object of Class type, and you can access it using
ClassName.class syntax.

You cannot declare constructors synchronized; it will result in a compiler error.
JVM ensures that only one thread can invoke a constructor call (for a specific constructor) at a given point in time.
If you want, you can use synchronized blocks inside constructors.

Beginners commonly misunderstand that a synchronized block obtains a lock for a block of code.
Actually, the lock is obtained for an object and not for a piece of code. The obtained lock is held until all
the statements in that block complete execution.

Obtaining and using locks is tricky, and it can lead to lots of problems. One of the difficult (and common) problems is
known as a deadlock. There are other problems such as livelocks and lock starvation.

• Deadlocks can arise in the context of multiple locks.
• If multiple locks are acquired in the same order, then a deadlock will not occur; however, if
you acquire them in a different order, then deadlocks may occur.
• Deadlocks (just like other multi-threading problems) are non-deterministic; you cannot
consistently reproduce deadlocks.

Avoid acquiring multiple locks. If you want to acquire multiple locks, make sure that they are acquired in
the same order everywhere to avoid deadlocks.

Consider two threads t1 and t2. Assume that thread t1 makes a change and thread t2 undoes that change. When
both the threads t1 and t2 work, it will appear as though lots of work is getting done, but no progress is made. This
situation is called a livelock in threads.
The similarity between livelocks and deadlocks is that the process “hangs” and the program never terminates.
However, in a deadlock, the threads are stuck in the same state waiting for other thread(s) to release a shared
resource; in a livelock, the threads keep executing a task, and there is continuous change in the process states, but the
application as a whole does not make progress.

In a situation where low-priority threads “starve” for a long time trying to obtain the lock is known as lock starvation.

The notify() method wakes up one thread waiting for the lock (the first thread that called wait() on that lock). The notifyAll() method wakes up all the threads
waiting for the lock; the JVM selects one of the threads from the list of threads waiting for the lock and wakes
that thread up.

When there is more than one thread waiting for the lock, in both notify() and notifyAll(), the exact thread woken up is under the control of the JVM and you cannot programmatically
control waking up a specific thread.

Prefer notifyAll() to notify().

If by mistake you use wait() on one lock and notify()/notifyAll() on another lock, the waiting thread will never get notified and the program will hang (leading to one kind of
deadlock situation)!

If you want a mechanism to wait for a particular event to occur, a wait/notify mechanism is the best
choice. Sometimes programmers solve this problem by using a sleep call, and they repeatedly check
the condition to see if the event has occurred. This is an ineffective solution. Further, calling sleep does
not release the lock (unlike wait), so a solution using sleep is prone to deadlocks. Do not use the sleep
method when a wait/notify mechanism is the appropriate solution.

Never call the start() method twice on the same thread: IllegalThreadStateException.

Never write a catch block for handling IllegalThreadStateException. If you get this exception, there is certainly a bug in the code. Fix that bug.
Always keeping in mind the states of the threads.

The wait(int) method (with or without timeout value) should be called only after acquiring a lock: a wait() call
adds the thread to the waiting queue of the acquired lock. If you don’t do that, there is no proper transition from the
running state to timed_waiting (or waiting state, if a timeout value is not given) to happen. So, the program crashes by
throwing an IllegalMonitorStateException exception.
The correct fix is to acquire the lock before calling wait(). In this case, you can declare the run() method
synchronized.

Since the run() method is synchronized, wait() will add itself to the this object reference lock. Since there is no
one calling the notify()/notifyAll() method, after a timeout of 1 second (1000 milliseconds) is over, it will return from
the run() method. So, the wait(1000); statement behaves almost like a sleep(1000) statement; the difference is that
calling wait() releases the lock on this object when it waits while sleep() call will not release the lock when it sleeps.

Call wait and notify/notifyAll only after acquiring the relevant lock.

THREAD METHODS

Thread currentThread() Static method Returns reference to the current thread.

String getName() Instance method Returns the name of the current thread.
int getPriority() Instance method Returns the priority value of the current thread.

void join(),
void join(long),
void join(long, int)
Overloaded instance methods
The current thread invoking join on another thread waits
until the other thread dies. You can optionally give the
timeout in milliseconds (given in long) or timeout in
milliseconds as well as nanoseconds (given in long and int).

void run() Instance method Once you start a thread (using the start() method), the
run() method will be called when the thread is ready to
execute.

void setName(String) Instance method Changes the name of the thread to the given name in the argument.
void setPriority(int) Instance method Sets the priority of the thread to the given argument value.
void sleep(long)
void sleep(long, int)
Overloaded static methods Makes the current thread sleep for given milliseconds
(given in long) or for given milliseconds and nanoseconds (given in long and int).

void start() Instance method Starts the thread; JVM calls the run() method of the thread.

String toString() Instance method Returns the string representation of the thread;

void wait(),
void wait(long),
void wait(long, int)
Overloaded instance methods The current thread should have acquired a lock on this object before calling any of the wait methods.
If wait() is called, the thread waits infinitely until some other thread notifies (by calling the notify()/notifyAll() method) for this lock.
The method wait(long) takes milliseconds as an argument.
The thread waits till it is notified or the timeout happens.
The wait(long, int) method is similar to wait(long) and additionally takes nanoseconds as an argument.
void notify() Instance method The current thread should have acquired a lock on this object before calling notify(). The JVM chooses a single thread that is waiting on the lock and wakes it up.
void notifyAll() Instance method The current thread should have acquired a lock before calling notifyAll(). The JVM wakes up all the threads waiting on a lock.
